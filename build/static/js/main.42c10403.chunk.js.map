{"version":3,"sources":["components/OrderList.js","helper.js","containers/Order.js","index.js"],"names":["OrderList","props","OrderData","localizationConfig","classname","map","order","index","className","key","id","items","item","Fragment","style","width","src","thumbnail","height","alt","name","LABEL_BRAND","brandName","Boolean","modelName","productId","sellerLabel","Order","state","orderData","axios","get","headers","then","res","data","result","orders","setState","this","PureComponent","App","langCode","navigator","language","split","ex","Component","render","document","getElementById"],"mappings":"mQAmCeA,G,MAjCG,SAAAC,GAAU,IAChBC,EAAuCD,EAAvCC,UADe,EACwBD,EAA5BE,0BADI,MACiB,GADjB,EAEvB,OACI,yBAAKC,UAAU,IACVF,EAAUG,KAAI,SAACC,EAAOC,GACnB,OACI,yBAAKC,UAAU,YAAYC,IAAKH,EAAMI,IAClC,yBAAKF,UAAU,eAEPF,EAAMK,MAAMN,KAAI,SAAAO,GACZ,OAAQ,kBAAC,IAAMC,SAAP,CAAgBJ,IAAKG,EAAKF,IAC9B,yBAAKF,UAAU,oBAAoBC,IAAKG,EAAKF,IACzC,yBAAKI,MAAO,CAAEC,MAAO,QAAS,yBAAKC,IAAKJ,EAAKK,UAAWF,MAAM,MAAMG,OAAO,KAAKC,IAAKP,EAAKQ,QAC1F,yBAAKN,MAAO,CAAEC,MAAO,OAASP,UAAU,2CACpC,8BAAOL,EAAmBkB,YAA1B,MAA0CT,EAAKU,WAC9CC,QAAQX,EAAKY,YAAc,yCAAeZ,EAAKY,WAChD,8BAAOZ,EAAKQ,MACZ,8CAAoBR,EAAKa,WACxBb,EAAKc,aAAoC,KAArBd,EAAKc,aAAsB,8BAAOd,EAAKc,2BCbrG,ICkCQC,E,YAlCX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACD2B,MAAQ,CACTC,UAAW,IAHA,E,iFAMA,IAAD,OAIlBC,IAAMC,IAAN,wDAAmE,CAAEC,QAAS,CAAE,eAAgB,UAAW,kBAHtF,0CAIpBC,MAAK,SAAAC,GACJ,IAAML,EAAYK,EAAIC,KAAKC,QAAUF,EAAIC,KAAKC,OAAOC,OACrD,EAAKC,SAAS,CAAET,mB,+BAWR,IACEA,EAAcU,KAAKX,MAAnBC,UACA1B,EAAuBoC,KAAKtC,MAA5BE,mBACR,OACI,yBAAKK,UAAW,gBACXqB,GAAa,kBAAC,EAAD,CAAW3B,UAAW2B,EAAW1B,mBAAoBA,S,GA9B/DqC,iBCAdC,G,kBACJ,aAAe,IAAD,8BACZ,+CACKb,MAAQ,CACXR,KAAM,SAHI,E,iFAOO,IACfsB,EADc,OAElB,IACEA,EAAWC,UAAUC,SAASC,MAAM,KAAK,GACzC,MAAMC,GACNJ,EAAW,KAEbZ,IAAMC,IAAN,6BAAgCW,EAAhC,UACCT,MAAK,SAAAC,GACJ,EAAKI,SAAS,CAAEnC,mBAAoB+B,EAAIC,Y,+BAIlC,IACAhC,EAAuBoC,KAAKX,MAA5BzB,mBACR,OACE,6BACE,kBAAC,EAAD,CAAOA,mBAAoBA,S,GAzBjB4C,cA+BlBC,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.42c10403.chunk.js","sourcesContent":["import React from 'react';\nimport './Items.scss';\nconst OrderList = props => {\n    const { OrderData, localizationConfig = {} } = props;\n    return (\n        <div classname=\"\">\n            {OrderData.map((order, index) => {\n                return (\n                    <div className=\"order-box\" key={order.id}>\n                        <div className=\"order-items\">\n                            {\n                                order.items.map(item => {\n                                    return (<React.Fragment key={item.id}>\n                                        <div className=\"display-flex item\" key={item.id}>\n                                            <div style={{ width: '40%' }}><img src={item.thumbnail} width=\"162\" height=\"76\" alt={item.name} /></div>\n                                            <div style={{ width: '60%' }} className=\"display-flex flex-direction-column info\">\n                                                <span>{localizationConfig.LABEL_BRAND} : {item.brandName}</span>\n                                                {Boolean(item.modelName) && <span>Model : {item.modelName}</span>}\n                                                <span>{item.name}</span>\n                                                <span>Product ID : {item.productId}</span>\n                                                {item.sellerLabel && item.sellerLabel !== '' && <span>{item.sellerLabel}</span>}\n                                            </div>\n                                        </div>\n                                    </React.Fragment>);\n                                })\n                            }\n                        </div>\n\n                    </div>\n                );\n            })\n            }\n        </div>\n    );\n}\nexport default OrderList;","/*global chrome*/\nexport function getCookies(domain, name, callback) { \n    chrome.cookies.get({\"url\": domain, \"name\": name}, function(cookie) { \n        if(callback) { callback(cookie.value); } \n    });\n}\n\nexport const showNotification = (id, options, callback) => {\n    chrome.notifications.create(id, options, function(data) {\n        if(callback) { callback(data); }\n    });\n};","import React, { PureComponent } from 'react';\nimport axios from 'axios';\nimport OrderList from '../components/OrderList';\nimport { showNotification } from '../helper'; // getCookies,\n/*global chrome*/\n\nclass Order extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            orderData: ''\n        };\n    }\n  componentDidMount() {\n    const sessionToken = '1c9119a9-d999-4f71-a00a-4fa0b7b3530e'; { /* getCookies(\"http://www.lenskart.com\", \"frontend\", function(id) {\n        alert(id);\n    }); */ }\n    axios.get(`https://api.lenskart.com/v3/orders?page=0&page-size=2`, { headers: { 'x-api-client': 'desktop', 'x-session-token': sessionToken } })\n    .then(res => {\n      const orderData = res.data.result && res.data.result.orders;\n      this.setState({ orderData });\n    });\n    /* let notification = showNotification('', {\n        type: \"basic\",\n        title: \"Primary Title\",\n        message: \"Primary message to display\",\n        iconUrl: \"/icon.png\"\n      }, function(data) {\n        // alert(data);\n    }); */\n}\n    render() {\n        const { orderData } = this.state;\n        const { localizationConfig } = this.props;\n        return (\n            <div className={'my-extension'}>\n                {orderData && <OrderList OrderData={orderData} localizationConfig={localizationConfig}/>}\n            </div>\n        )\n    }\n}\nexport default Order;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport axios from 'axios';\nimport Order from './containers/Order';\nimport './style.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: 'React'\n    };\n  }\n\n  componentDidMount() {\n    let langCode;\n    try {\n      langCode = navigator.language.split('-')[0];\n    } catch(ex) {\n      langCode = \"en\";  \n    }\n    axios.get(`/localization/lang_${langCode}.json`)\n    .then(res => {\n      this.setState({ localizationConfig: res.data});\n    });  \n  }\n\n  render() {\n    const { localizationConfig } = this.state;\n    return (\n      <div>\n        <Order localizationConfig={localizationConfig}/>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}